{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HPC (High-Performance Computing) \u00b6 Overview \u00b6 StreamHPC is a software development company in parallel software for many-core processors. The Supercomputing Blog FastC++: Coding Cpp Efficiently Heterogeneous Computing \u00b6 Introduction to Parallel Computing MPI (Message Passing Interface) \u00b6 MPI Forum : the standardization forum for MPI Open MPI : Open Source High Performance Computing. Concurrency \u00b6 task switching hardware concurrency Multi-Processing \u00b6 IPC \u00b6 Interprocess Communications (Microsoft) Inter-Process Communication (IPC) Introduction and Sample Code Multi-Threading \u00b6 POSIX C: pthread Boost: boost::thread C++11: std::thread Software Optimization \u00b6 \u5b9a\u70b9\uff08\u6d6e\u70b9\uff09\u8ba1\u7b97","title":"Home"},{"location":"#HPC_High-Performance_Computing","text":"","title":"HPC (High-Performance Computing)"},{"location":"#Overview","text":"StreamHPC is a software development company in parallel software for many-core processors. The Supercomputing Blog FastC++: Coding Cpp Efficiently","title":"Overview"},{"location":"#Heterogeneous_Computing","text":"Introduction to Parallel Computing","title":"Heterogeneous Computing"},{"location":"#MPI_Message_Passing_Interface","text":"MPI Forum : the standardization forum for MPI Open MPI : Open Source High Performance Computing.","title":"MPI (Message Passing Interface)"},{"location":"#Concurrency","text":"task switching hardware concurrency","title":"Concurrency"},{"location":"#Multi-Processing","text":"","title":"Multi-Processing"},{"location":"#IPC","text":"Interprocess Communications (Microsoft) Inter-Process Communication (IPC) Introduction and Sample Code","title":"IPC"},{"location":"#Multi-Threading","text":"POSIX C: pthread Boost: boost::thread C++11: std::thread","title":"Multi-Threading"},{"location":"#Software_Optimization","text":"\u5b9a\u70b9\uff08\u6d6e\u70b9\uff09\u8ba1\u7b97","title":"Software Optimization"},{"location":"cpu/","text":"CPU \u00b6 Overview \u00b6 Intel\u00ae 64 and IA-32 Architectures Software Developer Manuals Hotspots, FLOPS, and uOps: To-The-Metal CPU Optimization Architecture \u00b6 x86 x86_64 arm arm64 aarch64 mips mips64 FAQ \u00b6 \u5806 \u6808 \u5185\u5b58 CPU\u7f13\u5b58 \u6307\u5b9aCPU\u7f16\u7a0b cache line \u5bf9\u9f50\uff0c\u907f\u514dcache missing","title":"Overview"},{"location":"cpu/#CPU","text":"","title":"CPU"},{"location":"cpu/#Overview","text":"Intel\u00ae 64 and IA-32 Architectures Software Developer Manuals Hotspots, FLOPS, and uOps: To-The-Metal CPU Optimization","title":"Overview"},{"location":"cpu/#Architecture","text":"x86 x86_64 arm arm64 aarch64 mips mips64","title":"Architecture"},{"location":"cpu/#FAQ","text":"\u5806 \u6808 \u5185\u5b58 CPU\u7f13\u5b58 \u6307\u5b9aCPU\u7f16\u7a0b cache line \u5bf9\u9f50\uff0c\u907f\u514dcache missing","title":"FAQ"},{"location":"cpu/arm/","text":"ARM \u00b6 Android Performance \u00b6 Bash adb shell \"echo performance > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu0/cpufreq/scaling_setspeed\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq\" adb shell cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq adb shell cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq adb shell cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq adb shell cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor adb shell \"echo performance > /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu1/cpufreq/scaling_setspeed\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu1/cpufreq/scaling_max_freq\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu1/cpufreq/scaling_min_freq\" adb shell cat /sys/devices/system/cpu/cpu1/cpufreq/cpuinfo_cur_freq adb shell cat /sys/devices/system/cpu/cpu1/cpufreq/cpuinfo_max_freq adb shell cat /sys/devices/system/cpu/cpu1/cpufreq/cpuinfo_min_freq adb shell cat /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor adb shell \"echo performance > /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu2/cpufreq/scaling_setspeed\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu2/cpufreq/scaling_max_freq\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu2/cpufreq/scaling_min_freq\" adb shell cat /sys/devices/system/cpu/cpu2/cpufreq/cpuinfo_cur_freq adb shell cat /sys/devices/system/cpu/cpu2/cpufreq/cpuinfo_max_freq adb shell cat /sys/devices/system/cpu/cpu2/cpufreq/cpuinfo_min_freq adb shell cat /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor adb shell \"echo performance > /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu3/cpufreq/scaling_setspeed\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu3/cpufreq/scaling_max_freq\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu3/cpufreq/scaling_min_freq\" adb shell cat /sys/devices/system/cpu/cpu3/cpufreq/cpuinfo_cur_freq adb shell cat /sys/devices/system/cpu/cpu3/cpufreq/cpuinfo_max_freq adb shell cat /sys/devices/system/cpu/cpu3/cpufreq/cpuinfo_min_freq adb shell cat /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor adb shell \"echo performance > /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu4/cpufreq/scaling_setspeed\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu4/cpufreq/scaling_max_freq\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu4/cpufreq/scaling_min_freq\" adb shell cat /sys/devices/system/cpu/cpu4/cpufreq/cpuinfo_cur_freq adb shell cat /sys/devices/system/cpu/cpu4/cpufreq/cpuinfo_max_freq adb shell cat /sys/devices/system/cpu/cpu4/cpufreq/cpuinfo_min_freq adb shell cat /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor adb shell \"echo performance > /sys/devices/system/cpu/cpu5/cpufreq/scaling_governor\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu5/cpufreq/scaling_setspeed\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu5/cpufreq/scaling_max_freq\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu5/cpufreq/scaling_min_freq\" adb shell cat /sys/devices/system/cpu/cpu5/cpufreq/cpuinfo_cur_freq adb shell cat /sys/devices/system/cpu/cpu5/cpufreq/cpuinfo_max_freq adb shell cat /sys/devices/system/cpu/cpu5/cpufreq/cpuinfo_min_freq adb shell cat /sys/devices/system/cpu/cpu5/cpufreq/scaling_governor adb shell \"echo performance > /sys/devices/system/cpu/cpu6/cpufreq/scaling_governor\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu6/cpufreq/scaling_setspeed\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu6/cpufreq/scaling_max_freq\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu6/cpufreq/scaling_min_freq\" adb shell cat /sys/devices/system/cpu/cpu6/cpufreq/cpuinfo_cur_freq adb shell cat /sys/devices/system/cpu/cpu6/cpufreq/cpuinfo_max_freq adb shell cat /sys/devices/system/cpu/cpu6/cpufreq/cpuinfo_min_freq adb shell cat /sys/devices/system/cpu/cpu6/cpufreq/scaling_governor adb shell \"echo performance > /sys/devices/system/cpu/cpu7/cpufreq/scaling_governor\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu7/cpufreq/scaling_setspeed\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu7/cpufreq/scaling_max_freq\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu7/cpufreq/scaling_min_freq\" adb shell cat /sys/devices/system/cpu/cpu7/cpufreq/cpuinfo_cur_freq adb shell cat /sys/devices/system/cpu/cpu7/cpufreq/cpuinfo_max_freq adb shell cat /sys/devices/system/cpu/cpu7/cpufreq/cpuinfo_min_freq adb shell cat /sys/devices/system/cpu/cpu7/cpufreq/scaling_governor","title":"ARM"},{"location":"cpu/arm/#ARM","text":"","title":"ARM"},{"location":"cpu/arm/#Android_Performance","text":"Bash adb shell \"echo performance > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu0/cpufreq/scaling_setspeed\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq\" adb shell cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq adb shell cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq adb shell cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq adb shell cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor adb shell \"echo performance > /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu1/cpufreq/scaling_setspeed\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu1/cpufreq/scaling_max_freq\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu1/cpufreq/scaling_min_freq\" adb shell cat /sys/devices/system/cpu/cpu1/cpufreq/cpuinfo_cur_freq adb shell cat /sys/devices/system/cpu/cpu1/cpufreq/cpuinfo_max_freq adb shell cat /sys/devices/system/cpu/cpu1/cpufreq/cpuinfo_min_freq adb shell cat /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor adb shell \"echo performance > /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu2/cpufreq/scaling_setspeed\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu2/cpufreq/scaling_max_freq\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu2/cpufreq/scaling_min_freq\" adb shell cat /sys/devices/system/cpu/cpu2/cpufreq/cpuinfo_cur_freq adb shell cat /sys/devices/system/cpu/cpu2/cpufreq/cpuinfo_max_freq adb shell cat /sys/devices/system/cpu/cpu2/cpufreq/cpuinfo_min_freq adb shell cat /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor adb shell \"echo performance > /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu3/cpufreq/scaling_setspeed\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu3/cpufreq/scaling_max_freq\" adb shell \"echo 1766400 > /sys/devices/system/cpu/cpu3/cpufreq/scaling_min_freq\" adb shell cat /sys/devices/system/cpu/cpu3/cpufreq/cpuinfo_cur_freq adb shell cat /sys/devices/system/cpu/cpu3/cpufreq/cpuinfo_max_freq adb shell cat /sys/devices/system/cpu/cpu3/cpufreq/cpuinfo_min_freq adb shell cat /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor adb shell \"echo performance > /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu4/cpufreq/scaling_setspeed\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu4/cpufreq/scaling_max_freq\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu4/cpufreq/scaling_min_freq\" adb shell cat /sys/devices/system/cpu/cpu4/cpufreq/cpuinfo_cur_freq adb shell cat /sys/devices/system/cpu/cpu4/cpufreq/cpuinfo_max_freq adb shell cat /sys/devices/system/cpu/cpu4/cpufreq/cpuinfo_min_freq adb shell cat /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor adb shell \"echo performance > /sys/devices/system/cpu/cpu5/cpufreq/scaling_governor\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu5/cpufreq/scaling_setspeed\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu5/cpufreq/scaling_max_freq\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu5/cpufreq/scaling_min_freq\" adb shell cat /sys/devices/system/cpu/cpu5/cpufreq/cpuinfo_cur_freq adb shell cat /sys/devices/system/cpu/cpu5/cpufreq/cpuinfo_max_freq adb shell cat /sys/devices/system/cpu/cpu5/cpufreq/cpuinfo_min_freq adb shell cat /sys/devices/system/cpu/cpu5/cpufreq/scaling_governor adb shell \"echo performance > /sys/devices/system/cpu/cpu6/cpufreq/scaling_governor\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu6/cpufreq/scaling_setspeed\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu6/cpufreq/scaling_max_freq\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu6/cpufreq/scaling_min_freq\" adb shell cat /sys/devices/system/cpu/cpu6/cpufreq/cpuinfo_cur_freq adb shell cat /sys/devices/system/cpu/cpu6/cpufreq/cpuinfo_max_freq adb shell cat /sys/devices/system/cpu/cpu6/cpufreq/cpuinfo_min_freq adb shell cat /sys/devices/system/cpu/cpu6/cpufreq/scaling_governor adb shell \"echo performance > /sys/devices/system/cpu/cpu7/cpufreq/scaling_governor\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu7/cpufreq/scaling_setspeed\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu7/cpufreq/scaling_max_freq\" adb shell \"echo 2649600 > /sys/devices/system/cpu/cpu7/cpufreq/scaling_min_freq\" adb shell cat /sys/devices/system/cpu/cpu7/cpufreq/cpuinfo_cur_freq adb shell cat /sys/devices/system/cpu/cpu7/cpufreq/cpuinfo_max_freq adb shell cat /sys/devices/system/cpu/cpu7/cpufreq/cpuinfo_min_freq adb shell cat /sys/devices/system/cpu/cpu7/cpufreq/scaling_governor","title":"Android Performance"},{"location":"cpu/benchmark/","text":"CPU Benchmark \u00b6 Sysbench \u00b6 Sysbench -- Scriptable database and system performance benchmark, a cross-platform and multi-threaded benchmark tool Bash sysbench --test = cpu --cpu-max-prime = 20000 --num-threads = 4 run htop \u00b6 htop - an interactive process viewer for Unix htop explained - Explanation of everything you can see in htop/top on Linux \u538b\u529b\u6d4b\u8bd5 \u00b6 https://www.tecmint.com/linux-cpu-load-stress-test-with-stress-ng-tool/ Bash cat /sys/class/thermal/thermal_zone0/temp # stress stress --cpu 4 --io 4 --vm 1 --vm-bytes 1G","title":"Benchmark"},{"location":"cpu/benchmark/#CPU_Benchmark","text":"","title":"CPU Benchmark"},{"location":"cpu/benchmark/#Sysbench","text":"Sysbench -- Scriptable database and system performance benchmark, a cross-platform and multi-threaded benchmark tool Bash sysbench --test = cpu --cpu-max-prime = 20000 --num-threads = 4 run","title":"Sysbench"},{"location":"cpu/benchmark/#htop","text":"htop - an interactive process viewer for Unix htop explained - Explanation of everything you can see in htop/top on Linux","title":"htop"},{"location":"cpu/benchmark/#\u538b\u529b\u6d4b\u8bd5","text":"https://www.tecmint.com/linux-cpu-load-stress-test-with-stress-ng-tool/ Bash cat /sys/class/thermal/thermal_zone0/temp # stress stress --cpu 4 --io 4 --vm 1 --vm-bytes 1G","title":"\u538b\u529b\u6d4b\u8bd5"},{"location":"cpu/info/","text":"CPU Info \u00b6 Overview \u00b6 8 commands to check cpu information on Linux: /proc/cpuinfo : The /proc/cpuinfo file contains details about individual cpu cores. lscpu : simply print the cpu hardware details in a user-friendly format cpuid : fetches CPUID information about Intel and AMD x86 processors nproc : just prints out the number of processing units available, note that the number of processing units might not always be the same as number of cores dmidecode : displays some information about the cpu, which includes the socket type, vendor name and various flags hardinfo : would produce a large report about many hardware parts, by reading files from the /proc directory lshw -class processor : lshw by default shows information about various hardware parts, and the -class option can be used to pickup information about a specific hardware part inxi : a script that uses other programs to generate a well structured easy to read report about various hardware components on the system ARM CPU features \u00b6 Runtime detection of CPU features on an ARMv8-A CPU","title":"CPU Info"},{"location":"cpu/info/#CPU_Info","text":"","title":"CPU Info"},{"location":"cpu/info/#Overview","text":"8 commands to check cpu information on Linux: /proc/cpuinfo : The /proc/cpuinfo file contains details about individual cpu cores. lscpu : simply print the cpu hardware details in a user-friendly format cpuid : fetches CPUID information about Intel and AMD x86 processors nproc : just prints out the number of processing units available, note that the number of processing units might not always be the same as number of cores dmidecode : displays some information about the cpu, which includes the socket type, vendor name and various flags hardinfo : would produce a large report about many hardware parts, by reading files from the /proc directory lshw -class processor : lshw by default shows information about various hardware parts, and the -class option can be used to pickup information about a specific hardware part inxi : a script that uses other programs to generate a well structured easy to read report about various hardware components on the system","title":"Overview"},{"location":"cpu/info/#ARM_CPU_features","text":"Runtime detection of CPU features on an ARMv8-A CPU","title":"ARM CPU features"},{"location":"cpu/intrinsics/","text":"CPU Instructions & Intrinsics \u00b6 Overview \u00b6 Compiler Intrinsics Assembly \u00b6 x86 Assembly winasm : The x86 Assembly community and official home of WinAsm Studio and HiEditor Easy Code Visual assembly IDE 0xAX/asm : Learning assembly for linux-x64 SIMD \u00b6 Intel MMX & SSE \u00b6 Intel Intrinsics Guide SSE (Streaming SIMD Extentions) C++ - Getting started with SSE SSE - Vectorizing conditional code SSE\u56fe\u50cf\u7b97\u6cd5\u4f18\u5316\u7cfb\u5217(cnblogs) ARM NEON \u00b6 Arm NEON technology is an advanced SIMD (single instruction multiple data) architecture extension for the Arm Cortex-A series and Cortex-R52 processors. NEON Intrinsics Reference ARM NEON Tutorial in C and Assembler ARM NEON\u7f16\u7a0b\u521d\u63a2\u2014\u2014\u4e00\u4e2a\u7b80\u5355\u7684BGR888\u8f6cYUV444\u5b9e\u4f8b\u8be6\u89e3 Compiler Options: test ARM NEON Bash gcc -dM -E -x c /dev/null | grep -i -E \"(SIMD|NEON|ARM)\" Raspberry Pi 3 Model B g++ options Bash -std = c++11 -O3 -march = native -mfpu = neon-vfpv4 -mfloat-abi = softfp -ffast-math for the compilation error error: \u2018vfmaq_f32\u2019 was not declared in this scope , you might add the option -mfpu=neon-vfpv4 to enable __ARM_FEATURE_FMA in arm_neon.h Reference Books: NEON Programmer\u2019s Guide ARM\u00ae NEON Intrinsics Reference Converter \u00b6 jratcliff63367/sse2neon From ARM NEON* to Intel\u00ae SSE - The Automatic Porting Solution, Tips and Tricks","title":"Instructions & Intrinsics"},{"location":"cpu/intrinsics/#CPU_Instructions__Intrinsics","text":"","title":"CPU Instructions &amp; Intrinsics"},{"location":"cpu/intrinsics/#Overview","text":"Compiler Intrinsics","title":"Overview"},{"location":"cpu/intrinsics/#Assembly","text":"x86 Assembly winasm : The x86 Assembly community and official home of WinAsm Studio and HiEditor Easy Code Visual assembly IDE 0xAX/asm : Learning assembly for linux-x64","title":"Assembly"},{"location":"cpu/intrinsics/#SIMD","text":"","title":"SIMD"},{"location":"cpu/intrinsics/#Intel_MMX__SSE","text":"Intel Intrinsics Guide SSE (Streaming SIMD Extentions) C++ - Getting started with SSE SSE - Vectorizing conditional code SSE\u56fe\u50cf\u7b97\u6cd5\u4f18\u5316\u7cfb\u5217(cnblogs)","title":"Intel MMX &amp; SSE"},{"location":"cpu/intrinsics/#ARM_NEON","text":"Arm NEON technology is an advanced SIMD (single instruction multiple data) architecture extension for the Arm Cortex-A series and Cortex-R52 processors. NEON Intrinsics Reference ARM NEON Tutorial in C and Assembler ARM NEON\u7f16\u7a0b\u521d\u63a2\u2014\u2014\u4e00\u4e2a\u7b80\u5355\u7684BGR888\u8f6cYUV444\u5b9e\u4f8b\u8be6\u89e3 Compiler Options: test ARM NEON Bash gcc -dM -E -x c /dev/null | grep -i -E \"(SIMD|NEON|ARM)\" Raspberry Pi 3 Model B g++ options Bash -std = c++11 -O3 -march = native -mfpu = neon-vfpv4 -mfloat-abi = softfp -ffast-math for the compilation error error: \u2018vfmaq_f32\u2019 was not declared in this scope , you might add the option -mfpu=neon-vfpv4 to enable __ARM_FEATURE_FMA in arm_neon.h Reference Books: NEON Programmer\u2019s Guide ARM\u00ae NEON Intrinsics Reference","title":"ARM NEON"},{"location":"cpu/intrinsics/#Converter","text":"jratcliff63367/sse2neon From ARM NEON* to Intel\u00ae SSE - The Automatic Porting Solution, Tips and Tricks","title":"Converter"},{"location":"cpu/omp/","text":"OpenMP \u00b6 The OpenMP API specification for parallel programming, an Application Program Interface (API) that may be used to explicitly direct multi-threaded, shared memory parallelism . OpenMP\u6709\u4e24\u79cd\u5e38\u7528\u7684\u5e76\u884c\u5f00\u53d1\u5f62\u5f0f: \u4e00\u662f\u901a\u8fc7\u7b80\u5355\u7684 fork/join \u5bf9\u4e32\u884c\u7a0b\u5e8f\u5e76\u884c\u5316\uff0c\u4e8c\u662f\u91c7\u7528 \u5355\u7a0b\u5e8f\u591a\u6570\u636e \u5bf9\u4e32\u884c\u7a0b\u5e8f\u5e76\u884c\u5316\u3002 OpenMP Tutorials OpenMP in a nutshell CMakeLists.txt find_package ( OpenMP ) if ( OPENMP_FOUND ) set ( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}\" ) set ( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}\" ) set ( CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}\" ) endif ()","title":"OpenMP"},{"location":"cpu/omp/#OpenMP","text":"The OpenMP API specification for parallel programming, an Application Program Interface (API) that may be used to explicitly direct multi-threaded, shared memory parallelism . OpenMP\u6709\u4e24\u79cd\u5e38\u7528\u7684\u5e76\u884c\u5f00\u53d1\u5f62\u5f0f: \u4e00\u662f\u901a\u8fc7\u7b80\u5355\u7684 fork/join \u5bf9\u4e32\u884c\u7a0b\u5e8f\u5e76\u884c\u5316\uff0c\u4e8c\u662f\u91c7\u7528 \u5355\u7a0b\u5e8f\u591a\u6570\u636e \u5bf9\u4e32\u884c\u7a0b\u5e8f\u5e76\u884c\u5316\u3002 OpenMP Tutorials OpenMP in a nutshell CMakeLists.txt find_package ( OpenMP ) if ( OPENMP_FOUND ) set ( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}\" ) set ( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}\" ) set ( CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}\" ) endif ()","title":"OpenMP"},{"location":"cpu/others/","text":"Others \u00b6 OpenACC \u00b6 OpenACC is a user-driven directive-based performance-portable parallel programming model designed for scientists and engineers interested in porting their codes to a wide-variety of heterogeneous HPC hardware platforms and architectures with significantly less programming effort than required with a low-level model. Intel TBB \u00b6 Intel Threading Building Blocks (TBB) lets you easily write parallel C++ programs that take full advantage of multicore performance , that are portable and composable, and that have future-proof scalability. Intel IPP \u00b6","title":"Others"},{"location":"cpu/others/#Others","text":"","title":"Others"},{"location":"cpu/others/#OpenACC","text":"OpenACC is a user-driven directive-based performance-portable parallel programming model designed for scientists and engineers interested in porting their codes to a wide-variety of heterogeneous HPC hardware platforms and architectures with significantly less programming effort than required with a low-level model.","title":"OpenACC"},{"location":"cpu/others/#Intel_TBB","text":"Intel Threading Building Blocks (TBB) lets you easily write parallel C++ programs that take full advantage of multicore performance , that are portable and composable, and that have future-proof scalability.","title":"Intel TBB"},{"location":"cpu/others/#Intel_IPP","text":"","title":"Intel IPP"},{"location":"cpu/threadpool/","text":"Thread Pool \u00b6 Overview \u00b6 \u4f5c\u7528\uff1a\u7ba1\u7406\u4e00\u4e2a\u4efb\u52a1\u961f\u5217\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u961f\u5217\uff0c\u7136\u540e\u6bcf\u6b21\u53d6\u4e00\u4e2a\u4efb\u52a1\u5206\u914d\u7ed9\u4e00\u4e2a\u7ebf\u7a0b\u53bb\u505a\uff0c\u5faa\u73af\u5f80\u590d Code \u00b6 https://github.com/progschj/ThreadPool","title":"Thread Pool"},{"location":"cpu/threadpool/#Thread_Pool","text":"","title":"Thread Pool"},{"location":"cpu/threadpool/#Overview","text":"\u4f5c\u7528\uff1a\u7ba1\u7406\u4e00\u4e2a\u4efb\u52a1\u961f\u5217\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u961f\u5217\uff0c\u7136\u540e\u6bcf\u6b21\u53d6\u4e00\u4e2a\u4efb\u52a1\u5206\u914d\u7ed9\u4e00\u4e2a\u7ebf\u7a0b\u53bb\u505a\uff0c\u5faa\u73af\u5f80\u590d","title":"Overview"},{"location":"cpu/threadpool/#Code","text":"https://github.com/progschj/ThreadPool","title":"Code"},{"location":"dsp/","text":"DSP \u00b6","title":"Overview"},{"location":"dsp/#DSP","text":"","title":"DSP"},{"location":"gpu/","text":"GPU \u00b6 https://github.com/cggos/multicore_gpu_programming Overview \u00b6 GPU\u4e16\u754c\u6280\u672f\u8bba\u575b General-Purpose Computation on Graphics Hardware","title":"Overview"},{"location":"gpu/#GPU","text":"https://github.com/cggos/multicore_gpu_programming","title":"GPU"},{"location":"gpu/#Overview","text":"GPU\u4e16\u754c\u6280\u672f\u8bba\u575b General-Purpose Computation on Graphics Hardware","title":"Overview"},{"location":"gpu/benchmark/","text":"GPU Benchmark \u00b6 For the Raspberry Pi GPU benchmark, use the OpenGL 2.1 test that comes with GeeXLab msalvaris/gpu_monitor : Monitor your GPUs whether they are on a single computer or in a cluster Benchmark Your Graphics Card On Linux Bash watch -n 10 nvidia-smi # \u6bcf\u969410\u79d2\u66f4\u65b0\u4e00\u4e0b\u663e\u5361 # on Android watch -n 0 .1 adb shell cat /sys/class/kgsl/kgsl-3d0/gpu_busy_percentage # 0.1s","title":"Benchmark"},{"location":"gpu/benchmark/#GPU_Benchmark","text":"For the Raspberry Pi GPU benchmark, use the OpenGL 2.1 test that comes with GeeXLab msalvaris/gpu_monitor : Monitor your GPUs whether they are on a single computer or in a cluster Benchmark Your Graphics Card On Linux Bash watch -n 10 nvidia-smi # \u6bcf\u969410\u79d2\u66f4\u65b0\u4e00\u4e0b\u663e\u5361 # on Android watch -n 0 .1 adb shell cat /sys/class/kgsl/kgsl-3d0/gpu_busy_percentage # 0.1s","title":"GPU Benchmark"},{"location":"gpu/building/nvcc/","text":"NVCC \u00b6 Overview \u00b6 https://patrickorcl.medium.com/compile-with-nvcc-3566fbdfdbf https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/ https://stackoverflow.com/questions/35656294/cuda-how-to-use-arch-and-code-and-sm-vs-compute https://www.cnblogs.com/phillee/p/12049208.html Build with CMake \u00b6 CMakeLists set ( CUDA_NVCC_FLAGS ${ CUDA_NVCC_FLAGS } -O3 -std=c++11 -gencode arch=compute_52,code=sm_52 ) set ( CUDA_NVCC_FLAGS ${ CUDA_NVCC_FLAGS } -arch compute_52 -code sm_52 ) compute_XX \u6307\u7684\u662f PTX \u7248\u672c sm_XX \u6307\u7684\u662f cubin \u7248\u672c nvcc \u7684 -gencode= \u547d\u4ee4\u884c\u9009\u9879\u7684 arch= \u6307\u5b9a\u524d\u7aef\u7f16\u8bd1\u76ee\u6807\uff0c\u5e76\u4e14\u5fc5\u987b\u59cb\u7ec8\u4e3a PTX \u7248\u672c\u3002 code= \u6307\u5b9a\u540e\u7aef\u7f16\u8bd1\u76ee\u6807\uff0c\u53ef\u4ee5\u662f cubin \u6216 PTX \u6216\u4e24\u8005\u5747\u53ef\u3002 \u53ea\u6709\u7531 code= \u6307\u5b9a\u7684\u540e\u7aef\u76ee\u6807\u7248\u672c\u5c06\u4fdd\u7559\u5728\u7ed3\u679c\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\uff0c\u81f3\u5c11\u5305\u542b\u4e00\u4e2aPTX\u4ee5\u63d0\u4f9bVolta\u517c\u5bb9\u6027 Build OpenCV with CUDA \u00b6 Bash #!/bin/sh cmake \\ -D CMAKE_BUILD_TYPE = Release \\ -D CMAKE_INSTALL_PREFIX = /opt/opencv_34 \\ -D WITH_VTK = OFF \\ -D WITH_MATLAB = OFF \\ -D WITH_TBB = ON \\ -D WITH_IPP = OFF \\ -D WITH_FFMPEG = OFF \\ -D WITH_V4L = ON \\ -D WITH_CUDA = ON \\ -D CUDA_GENERATION = Pascal \\ -D ENABLE_PRECOMPILED_HEADERS = OFF \\ -D OPENCV_EXTRA_MODULES_PATH = ../opencv_contrib/modules \\ ../opencv/ output -- NVIDIA CUDA -- Use CUFFT: YES -- Use CUBLAS: NO -- USE NVCUVID: NO -- NVIDIA GPU arch: 30 35 -- NVIDIA PTX archs: -- Use fast math: NO","title":"NVCC"},{"location":"gpu/building/nvcc/#NVCC","text":"","title":"NVCC"},{"location":"gpu/building/nvcc/#Overview","text":"https://patrickorcl.medium.com/compile-with-nvcc-3566fbdfdbf https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/ https://stackoverflow.com/questions/35656294/cuda-how-to-use-arch-and-code-and-sm-vs-compute https://www.cnblogs.com/phillee/p/12049208.html","title":"Overview"},{"location":"gpu/building/nvcc/#Build_with_CMake","text":"CMakeLists set ( CUDA_NVCC_FLAGS ${ CUDA_NVCC_FLAGS } -O3 -std=c++11 -gencode arch=compute_52,code=sm_52 ) set ( CUDA_NVCC_FLAGS ${ CUDA_NVCC_FLAGS } -arch compute_52 -code sm_52 ) compute_XX \u6307\u7684\u662f PTX \u7248\u672c sm_XX \u6307\u7684\u662f cubin \u7248\u672c nvcc \u7684 -gencode= \u547d\u4ee4\u884c\u9009\u9879\u7684 arch= \u6307\u5b9a\u524d\u7aef\u7f16\u8bd1\u76ee\u6807\uff0c\u5e76\u4e14\u5fc5\u987b\u59cb\u7ec8\u4e3a PTX \u7248\u672c\u3002 code= \u6307\u5b9a\u540e\u7aef\u7f16\u8bd1\u76ee\u6807\uff0c\u53ef\u4ee5\u662f cubin \u6216 PTX \u6216\u4e24\u8005\u5747\u53ef\u3002 \u53ea\u6709\u7531 code= \u6307\u5b9a\u7684\u540e\u7aef\u76ee\u6807\u7248\u672c\u5c06\u4fdd\u7559\u5728\u7ed3\u679c\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\uff0c\u81f3\u5c11\u5305\u542b\u4e00\u4e2aPTX\u4ee5\u63d0\u4f9bVolta\u517c\u5bb9\u6027","title":"Build with CMake"},{"location":"gpu/building/nvcc/#Build_OpenCV_with_CUDA","text":"Bash #!/bin/sh cmake \\ -D CMAKE_BUILD_TYPE = Release \\ -D CMAKE_INSTALL_PREFIX = /opt/opencv_34 \\ -D WITH_VTK = OFF \\ -D WITH_MATLAB = OFF \\ -D WITH_TBB = ON \\ -D WITH_IPP = OFF \\ -D WITH_FFMPEG = OFF \\ -D WITH_V4L = ON \\ -D WITH_CUDA = ON \\ -D CUDA_GENERATION = Pascal \\ -D ENABLE_PRECOMPILED_HEADERS = OFF \\ -D OPENCV_EXTRA_MODULES_PATH = ../opencv_contrib/modules \\ ../opencv/ output -- NVIDIA CUDA -- Use CUFFT: YES -- Use CUBLAS: NO -- USE NVCUVID: NO -- NVIDIA GPU arch: 30 35 -- NVIDIA PTX archs: -- Use fast math: NO","title":"Build OpenCV with CUDA"},{"location":"gpu/languages/","text":"Languages \u00b6 Overview \u00b6 CUDA vs OpenCL: Which should I use?","title":"Overview"},{"location":"gpu/languages/#Languages","text":"","title":"Languages"},{"location":"gpu/languages/#Overview","text":"CUDA vs OpenCL: Which should I use?","title":"Overview"},{"location":"gpu/languages/cuda/","text":"CUDA \u00b6 Overview \u00b6 CUDA\u00ae is a parallel computing platform and programming model developed by NVIDIA for general computing on graphical processing units (GPUs). CUDA Zone ArchaeaSoftware/cudahandbook CUDA for ARM Platforms is Now Available Thrust \u00b6 Thrust Thrust in CUDA Toolkit Install \u00b6 https://developer.nvidia.com/cuda-toolkit cuda 9.0: https://developer.nvidia.com/cuda-90-download-archive?target_os=Linux&target_arch=x86_64&target_distro=Ubuntu&target_version=1604&target_type=runfilelocal install Bash sudo sh cuda_8.0.44_linux.run --override --no-opengl-lib sudo sh cuda_9.0.176_384.81_linux.run sudo sh cuda_10.0.130_410.48_linux.run --toolkit --silent # ubuntu 18.04 # for pytorch 1.10 sudo sh cuda_10.2.89_440.33.01_linux.run --toolkit --silent # ubuntu 18.04 sudo sh cuda_11.5.1_495.29.05_linux.run --toolkit --silent --override config .bashrc export CUDA_HOME = $CUDA_HOME :/usr/local/cuda-10.0 export PATH = $PATH : $CUDA_HOME /bin # or, add /usr/local/cuda-8.0/lib64 to /etc/ld.so.conf and run ldconfig as root export LD_LIBRARY_PATH = $LD_LIBRARY_PATH : $CUDA_HOME /lib64 check Bash nvcc --version # or nvcc -V # on Jetson cat /usr/local/cuda/version.txt test Bash cd /usr/local/cuda-10.0/samples/1_Utilities/deviceQuery sudo make ./deviceQuery output ./deviceQuery Starting... CUDA Device Query (Runtime API) version (CUDART static linking) Detected 1 CUDA Capable device(s) Device 0: \"NVIDIA GeForce GTX 1660 SUPER\" CUDA Driver Version / Runtime Version 11.4 / 8.0 CUDA Capability Major/Minor version number: 7.5 Total amount of global memory: 5943 MBytes (6232014848 bytes) MapSMtoCores for SM 7.5 is undefined. Default to use 128 Cores/SM MapSMtoCores for SM 7.5 is undefined. Default to use 128 Cores/SM (22) Multiprocessors, (128) CUDA Cores/MP: 2816 CUDA Cores GPU Max Clock rate: 1785 MHz (1.78 GHz) Memory Clock rate: 7001 Mhz Memory Bus Width: 192-bit L2 Cache Size: 1572864 bytes Maximum Texture Dimension Size (x,y,z) 1D=(131072), 2D=(131072, 65536), 3D=(16384, 16384, 16384) Maximum Layered 1D Texture Size, (num) layers 1D=(32768), 2048 layers Maximum Layered 2D Texture Size, (num) layers 2D=(32768, 32768), 2048 layers Total amount of constant memory: 65536 bytes Total amount of shared memory per block: 49152 bytes Total number of registers available per block: 65536 Warp size: 32 Maximum number of threads per multiprocessor: 1024 Maximum number of threads per block: 1024 Max dimension size of a thread block (x,y,z): (1024, 1024, 64) Max dimension size of a grid size (x,y,z): (2147483647, 65535, 65535) Maximum memory pitch: 2147483647 bytes Texture alignment: 512 bytes Concurrent copy and kernel execution: Yes with 3 copy engine(s) Run time limit on kernels: Yes Integrated GPU sharing Host Memory: No Support host page-locked memory mapping: Yes Alignment requirement for Surfaces: Yes Device has ECC support: Disabled Device supports Unified Addressing (UVA): Yes Device PCI Domain ID / Bus ID / location ID: 0 / 1 / 0 Compute Mode: < Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) > deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 11.4, CUDA Runtime Version = 8.0, NumDevs = 1, Device0 = NVIDIA GeForce GTX 1660 SUPER Result = PASS Install cuDNN \u00b6 https://developer.nvidia.com/cudnn \u89e3\u538b\uff0c\u5e76\u8fdb\u5165\u5230\u76f8\u5e94\u76ee\u5f55\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4 Bash sudo cp <cudnn-path>/include/* /usr/local/cuda-10.2/include/ sudo cp <cudnn-path>/lib/* /usr/local/cuda-10.2/lib64/ \u67e5\u770bcuDNN\u7248\u672c Bash cat /usr/local/cuda-10.2/include/cudnn.h | grep CUDNN_MAJOR -A 2 # Jetson cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2 cat /usr/include/cudnn.h | grep CUDNN_MAJOR -A 2","title":"CUDA"},{"location":"gpu/languages/cuda/#CUDA","text":"","title":"CUDA"},{"location":"gpu/languages/cuda/#Overview","text":"CUDA\u00ae is a parallel computing platform and programming model developed by NVIDIA for general computing on graphical processing units (GPUs). CUDA Zone ArchaeaSoftware/cudahandbook CUDA for ARM Platforms is Now Available","title":"Overview"},{"location":"gpu/languages/cuda/#Thrust","text":"Thrust Thrust in CUDA Toolkit","title":"Thrust"},{"location":"gpu/languages/cuda/#Install","text":"https://developer.nvidia.com/cuda-toolkit cuda 9.0: https://developer.nvidia.com/cuda-90-download-archive?target_os=Linux&target_arch=x86_64&target_distro=Ubuntu&target_version=1604&target_type=runfilelocal install Bash sudo sh cuda_8.0.44_linux.run --override --no-opengl-lib sudo sh cuda_9.0.176_384.81_linux.run sudo sh cuda_10.0.130_410.48_linux.run --toolkit --silent # ubuntu 18.04 # for pytorch 1.10 sudo sh cuda_10.2.89_440.33.01_linux.run --toolkit --silent # ubuntu 18.04 sudo sh cuda_11.5.1_495.29.05_linux.run --toolkit --silent --override config .bashrc export CUDA_HOME = $CUDA_HOME :/usr/local/cuda-10.0 export PATH = $PATH : $CUDA_HOME /bin # or, add /usr/local/cuda-8.0/lib64 to /etc/ld.so.conf and run ldconfig as root export LD_LIBRARY_PATH = $LD_LIBRARY_PATH : $CUDA_HOME /lib64 check Bash nvcc --version # or nvcc -V # on Jetson cat /usr/local/cuda/version.txt test Bash cd /usr/local/cuda-10.0/samples/1_Utilities/deviceQuery sudo make ./deviceQuery output ./deviceQuery Starting... CUDA Device Query (Runtime API) version (CUDART static linking) Detected 1 CUDA Capable device(s) Device 0: \"NVIDIA GeForce GTX 1660 SUPER\" CUDA Driver Version / Runtime Version 11.4 / 8.0 CUDA Capability Major/Minor version number: 7.5 Total amount of global memory: 5943 MBytes (6232014848 bytes) MapSMtoCores for SM 7.5 is undefined. Default to use 128 Cores/SM MapSMtoCores for SM 7.5 is undefined. Default to use 128 Cores/SM (22) Multiprocessors, (128) CUDA Cores/MP: 2816 CUDA Cores GPU Max Clock rate: 1785 MHz (1.78 GHz) Memory Clock rate: 7001 Mhz Memory Bus Width: 192-bit L2 Cache Size: 1572864 bytes Maximum Texture Dimension Size (x,y,z) 1D=(131072), 2D=(131072, 65536), 3D=(16384, 16384, 16384) Maximum Layered 1D Texture Size, (num) layers 1D=(32768), 2048 layers Maximum Layered 2D Texture Size, (num) layers 2D=(32768, 32768), 2048 layers Total amount of constant memory: 65536 bytes Total amount of shared memory per block: 49152 bytes Total number of registers available per block: 65536 Warp size: 32 Maximum number of threads per multiprocessor: 1024 Maximum number of threads per block: 1024 Max dimension size of a thread block (x,y,z): (1024, 1024, 64) Max dimension size of a grid size (x,y,z): (2147483647, 65535, 65535) Maximum memory pitch: 2147483647 bytes Texture alignment: 512 bytes Concurrent copy and kernel execution: Yes with 3 copy engine(s) Run time limit on kernels: Yes Integrated GPU sharing Host Memory: No Support host page-locked memory mapping: Yes Alignment requirement for Surfaces: Yes Device has ECC support: Disabled Device supports Unified Addressing (UVA): Yes Device PCI Domain ID / Bus ID / location ID: 0 / 1 / 0 Compute Mode: < Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) > deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 11.4, CUDA Runtime Version = 8.0, NumDevs = 1, Device0 = NVIDIA GeForce GTX 1660 SUPER Result = PASS","title":"Install"},{"location":"gpu/languages/cuda/#Install_cuDNN","text":"https://developer.nvidia.com/cudnn \u89e3\u538b\uff0c\u5e76\u8fdb\u5165\u5230\u76f8\u5e94\u76ee\u5f55\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4 Bash sudo cp <cudnn-path>/include/* /usr/local/cuda-10.2/include/ sudo cp <cudnn-path>/lib/* /usr/local/cuda-10.2/lib64/ \u67e5\u770bcuDNN\u7248\u672c Bash cat /usr/local/cuda-10.2/include/cudnn.h | grep CUDNN_MAJOR -A 2 # Jetson cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2 cat /usr/include/cudnn.h | grep CUDNN_MAJOR -A 2","title":"Install cuDNN"},{"location":"gpu/languages/ocl/","text":"OpenCL \u00b6 Overview \u00b6 OpenCL\u2122 (Open Computing Language) is the open, royalty-free standard for cross-platform, parallel programming of diverse processors found in personal computers, servers, mobile devices and embedded platforms. install OpenCL Bash # required: Ubuntu 16.04, nvidia GPU and nvidia driver installed sudo apt-get install nvidia-prime nvidia-modprobe nvidia-opencl-dev sudo ln -s /usr/lib/x86_64-linux-gnu/libOpenCL.so.1 /usr/local/lib/libOpenCL.so build program Bash g++ main.cpp -lOpenCL","title":"OpenCL"},{"location":"gpu/languages/ocl/#OpenCL","text":"","title":"OpenCL"},{"location":"gpu/languages/ocl/#Overview","text":"OpenCL\u2122 (Open Computing Language) is the open, royalty-free standard for cross-platform, parallel programming of diverse processors found in personal computers, servers, mobile devices and embedded platforms. install OpenCL Bash # required: Ubuntu 16.04, nvidia GPU and nvidia driver installed sudo apt-get install nvidia-prime nvidia-modprobe nvidia-opencl-dev sudo ln -s /usr/lib/x86_64-linux-gnu/libOpenCL.so.1 /usr/local/lib/libOpenCL.so build program Bash g++ main.cpp -lOpenCL","title":"Overview"},{"location":"gpu/platform/","text":"Platforms \u00b6","title":"Overview"},{"location":"gpu/platform/#Platforms","text":"","title":"Platforms"},{"location":"gpu/platform/mali/","text":"ARM MALI GPU \u00b6 ARM MALI GPU","title":"Mali"},{"location":"gpu/platform/mali/#ARM_MALI_GPU","text":"ARM MALI GPU","title":"ARM MALI GPU"},{"location":"gpu/platform/nvidia/","text":"Nvidia \u00b6 Overview \u00b6 https://blog.csdn.net/huanghaihui_123/article/details/87985403 https://www.linkedin.com/pulse/installing-nvidia-cuda-80-ubuntu-1604-linux-gpu-new-victor/ Check Graphics Card \u00b6 Check your Nvidia graphics card Bash lspci | grep -E \"VGA|3D\" or Bash lspci | grep -i vga lspci -v -s 01 :00.0 check which driver is being used for Nvidia card Bash sudo lshw [ -numeric ] -C display or Bash sudo lshw -c video query and select driver Bash prime-select query sudo prime-select nvidia output WARNING: you should run this program as super-user. *-display description: VGA compatible controller product: GP106 [GeForce GTX 1060 3GB] [10DE:1C02] vendor: NVIDIA Corporation [10DE] physical id: 0 bus info: pci@0000:01:00.0 version: a1 width: 64 bits clock: 33MHz capabilities: vga_controller bus_master cap_list rom configuration: driver=nvidia latency=0 resources: irq:130 memory:f6000000-f6ffffff memory:e0000000-efffffff memory:f0000000-f1ffffff ioport:e000(size=128) memory:f7000000-f707ffff *-display description: VGA compatible controller product: HD Graphics 630 [8086:5912] vendor: Intel Corporation [8086] physical id: 2 bus info: pci@0000:00:02.0 version: 04 width: 64 bits clock: 33MHz capabilities: vga_controller bus_master cap_list rom configuration: driver=i915 latency=0 resources: irq:128 memory:f5000000-f5ffffff memory:d0000000-dfffffff ioport:f000(size=64) memory:c0000-dffff WARNING: output may be incomplete or inaccurate, you should run this program as super-user. Nvidia Jetson \u00b6 \u67e5\u770b\u7cfb\u7edf\u4fe1\u606f Bash cat /etc/lsb-release # \u67e5\u770b\u7cfb\u7edf\u7248\u672c uname -a # \u67e5\u770b\u7cfb\u7edf\u5185\u6838 \u67e5\u8be2Jetson\u8bbe\u5907\u4e0e\u5f00\u53d1\u73af\u5883\u7248\u672c\u7684\u57fa\u7840\u4fe1\u606f http://www.gpus.cn/gpus_list_page_techno_support_content?id=39 \u67e5\u770b\u7cfb\u7edf\u7684l4t\u7684\u7248\u672c\u53f7 Bash head -n 1 /etc/nv_tegra_release Install Nvidia Drivers \u00b6 Drivers in App Store \u00b6 \u67e5\u770b\u9a71\u52a8 Bash ubuntu-drivers devices output WARNING:root:_pkg_get_support nvidia-driver-390: package has invalid Support Legacyheader, cannot determine support level == /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0 == modalias : pci:v000010DEd00001C02sv00001043sd000085BCbc03sc00i00 vendor : NVIDIA Corporation model : GP106 [GeForce GTX 1060 3GB] driver : nvidia-driver-450-server - distro non-free driver : nvidia-driver-418-server - distro non-free driver : nvidia-driver-495 - distro non-free driver : nvidia-driver-460-server - distro non-free driver : nvidia-driver-470 - distro non-free recommended driver : nvidia-driver-390 - distro non-free driver : nvidia-driver-460 - distro non-free driver : nvidia-driver-470-server - distro non-free driver : xserver-xorg-video-nouveau - distro free builtin \u5b89\u88c5\u9a71\u52a8 Bash sudo ubuntu-drivers autoinstall # or sudo apt install nvidia-470 Install Drivers Manually \u00b6 2 Ways to Install Nvidia Driver on Ubuntu 18.04 (GUI & Command Line) https://xungejiang.com/2019/10/08/ubuntu-gpu-driver/ https://zhuanlan.zhihu.com/p/59618999 download nvidia drivers : https://www.geforce.com/drivers https://www.nvidia.com/Download/index.aspx disable and check nouveau : disable nouveau Bash sudo vim /etc/modprobe.d/blacklist.conf and add below in it Bash blacklist nouveau options nouveau modeset = 0 update and reboot Bash sudo update-initramfs -u sudo reboot check nouveau Bash lsmod | grep nouveau Ubuntu 18.04 begin Ubuntu 18.04\uff1a\u767b\u5f55\u65f6\u6309 ctrl + alt + F2 \u8fdb\u5165\u547d\u4ee4\u884c\u5e76\u4f7f\u7528\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\uff0c\u5e76\u8f93\u5165 sudo telinit 3 \u6253\u5f00\u4e00\u4e2a\u65b0\u7684 TTY1 \u754c\u9762\uff0c\u5b89\u88c5 Bash sudo apt-get remove nvidia-* sudo bash ./NVIDIA-Linux-x86_64-396.18.run Ubuntu 18.04\u81f3\u6b64\u5b89\u88c5\u7ed3\u675f\uff01 Ubuntu 18.04 end enter tty and turn off gui : enter tty1 Bash ctrl+alt+f1 turn off gui Bash sudo service lightdm stop install nvidia drivers : Bash sudo apt-get remove nvidia-* sudo ./NVIDIA-Linux-x86_64-396.18.run -no-x-check -no-nouveau-check -no-opengl-files no-x-check\uff1a\u5b89\u88c5\u9a71\u52a8\u65f6\u5173\u95edX\u670d\u52a1 no-nouveau-check\uff1a\u5b89\u88c5\u9a71\u52a8\u65f6\u7981\u7528nouveau no-opengl-files\uff1a\u53ea\u5b89\u88c5\u9a71\u52a8\u6587\u4ef6\uff0c\u4e0d\u5b89\u88c5OpenGL\u6587\u4ef6, \u53ea\u6709\u7981\u7528opengl\u8fd9\u6837\u5b89\u88c5\u624d\u4e0d\u4f1a\u51fa\u73b0\u5faa\u73af\u767b\u9646\u7684\u95ee\u9898 check status and settings : check your installation status Bash lsmod | grep nvidia or Bash nvidia-smi settings Bash nvidia-settings uninstall nvidia drivers : uninstall nvidia drivers Bash sudo apt-get purge nvidia-* or Bash sudo /usr/bin/nvidia-uninstall Install NVIDIA-Docker \u00b6 \u7528nvidia-docker\u8dd1\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b","title":"Nvidia"},{"location":"gpu/platform/nvidia/#Nvidia","text":"","title":"Nvidia"},{"location":"gpu/platform/nvidia/#Overview","text":"https://blog.csdn.net/huanghaihui_123/article/details/87985403 https://www.linkedin.com/pulse/installing-nvidia-cuda-80-ubuntu-1604-linux-gpu-new-victor/","title":"Overview"},{"location":"gpu/platform/nvidia/#Check_Graphics_Card","text":"Check your Nvidia graphics card Bash lspci | grep -E \"VGA|3D\" or Bash lspci | grep -i vga lspci -v -s 01 :00.0 check which driver is being used for Nvidia card Bash sudo lshw [ -numeric ] -C display or Bash sudo lshw -c video query and select driver Bash prime-select query sudo prime-select nvidia output WARNING: you should run this program as super-user. *-display description: VGA compatible controller product: GP106 [GeForce GTX 1060 3GB] [10DE:1C02] vendor: NVIDIA Corporation [10DE] physical id: 0 bus info: pci@0000:01:00.0 version: a1 width: 64 bits clock: 33MHz capabilities: vga_controller bus_master cap_list rom configuration: driver=nvidia latency=0 resources: irq:130 memory:f6000000-f6ffffff memory:e0000000-efffffff memory:f0000000-f1ffffff ioport:e000(size=128) memory:f7000000-f707ffff *-display description: VGA compatible controller product: HD Graphics 630 [8086:5912] vendor: Intel Corporation [8086] physical id: 2 bus info: pci@0000:00:02.0 version: 04 width: 64 bits clock: 33MHz capabilities: vga_controller bus_master cap_list rom configuration: driver=i915 latency=0 resources: irq:128 memory:f5000000-f5ffffff memory:d0000000-dfffffff ioport:f000(size=64) memory:c0000-dffff WARNING: output may be incomplete or inaccurate, you should run this program as super-user.","title":"Check Graphics Card"},{"location":"gpu/platform/nvidia/#Nvidia_Jetson","text":"\u67e5\u770b\u7cfb\u7edf\u4fe1\u606f Bash cat /etc/lsb-release # \u67e5\u770b\u7cfb\u7edf\u7248\u672c uname -a # \u67e5\u770b\u7cfb\u7edf\u5185\u6838 \u67e5\u8be2Jetson\u8bbe\u5907\u4e0e\u5f00\u53d1\u73af\u5883\u7248\u672c\u7684\u57fa\u7840\u4fe1\u606f http://www.gpus.cn/gpus_list_page_techno_support_content?id=39 \u67e5\u770b\u7cfb\u7edf\u7684l4t\u7684\u7248\u672c\u53f7 Bash head -n 1 /etc/nv_tegra_release","title":"Nvidia Jetson"},{"location":"gpu/platform/nvidia/#Install_Nvidia_Drivers","text":"","title":"Install Nvidia Drivers"},{"location":"gpu/platform/nvidia/#Drivers_in_App_Store","text":"\u67e5\u770b\u9a71\u52a8 Bash ubuntu-drivers devices output WARNING:root:_pkg_get_support nvidia-driver-390: package has invalid Support Legacyheader, cannot determine support level == /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0 == modalias : pci:v000010DEd00001C02sv00001043sd000085BCbc03sc00i00 vendor : NVIDIA Corporation model : GP106 [GeForce GTX 1060 3GB] driver : nvidia-driver-450-server - distro non-free driver : nvidia-driver-418-server - distro non-free driver : nvidia-driver-495 - distro non-free driver : nvidia-driver-460-server - distro non-free driver : nvidia-driver-470 - distro non-free recommended driver : nvidia-driver-390 - distro non-free driver : nvidia-driver-460 - distro non-free driver : nvidia-driver-470-server - distro non-free driver : xserver-xorg-video-nouveau - distro free builtin \u5b89\u88c5\u9a71\u52a8 Bash sudo ubuntu-drivers autoinstall # or sudo apt install nvidia-470","title":"Drivers in App Store"},{"location":"gpu/platform/nvidia/#Install_Drivers_Manually","text":"2 Ways to Install Nvidia Driver on Ubuntu 18.04 (GUI & Command Line) https://xungejiang.com/2019/10/08/ubuntu-gpu-driver/ https://zhuanlan.zhihu.com/p/59618999 download nvidia drivers : https://www.geforce.com/drivers https://www.nvidia.com/Download/index.aspx disable and check nouveau : disable nouveau Bash sudo vim /etc/modprobe.d/blacklist.conf and add below in it Bash blacklist nouveau options nouveau modeset = 0 update and reboot Bash sudo update-initramfs -u sudo reboot check nouveau Bash lsmod | grep nouveau Ubuntu 18.04 begin Ubuntu 18.04\uff1a\u767b\u5f55\u65f6\u6309 ctrl + alt + F2 \u8fdb\u5165\u547d\u4ee4\u884c\u5e76\u4f7f\u7528\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\uff0c\u5e76\u8f93\u5165 sudo telinit 3 \u6253\u5f00\u4e00\u4e2a\u65b0\u7684 TTY1 \u754c\u9762\uff0c\u5b89\u88c5 Bash sudo apt-get remove nvidia-* sudo bash ./NVIDIA-Linux-x86_64-396.18.run Ubuntu 18.04\u81f3\u6b64\u5b89\u88c5\u7ed3\u675f\uff01 Ubuntu 18.04 end enter tty and turn off gui : enter tty1 Bash ctrl+alt+f1 turn off gui Bash sudo service lightdm stop install nvidia drivers : Bash sudo apt-get remove nvidia-* sudo ./NVIDIA-Linux-x86_64-396.18.run -no-x-check -no-nouveau-check -no-opengl-files no-x-check\uff1a\u5b89\u88c5\u9a71\u52a8\u65f6\u5173\u95edX\u670d\u52a1 no-nouveau-check\uff1a\u5b89\u88c5\u9a71\u52a8\u65f6\u7981\u7528nouveau no-opengl-files\uff1a\u53ea\u5b89\u88c5\u9a71\u52a8\u6587\u4ef6\uff0c\u4e0d\u5b89\u88c5OpenGL\u6587\u4ef6, \u53ea\u6709\u7981\u7528opengl\u8fd9\u6837\u5b89\u88c5\u624d\u4e0d\u4f1a\u51fa\u73b0\u5faa\u73af\u767b\u9646\u7684\u95ee\u9898 check status and settings : check your installation status Bash lsmod | grep nvidia or Bash nvidia-smi settings Bash nvidia-settings uninstall nvidia drivers : uninstall nvidia drivers Bash sudo apt-get purge nvidia-* or Bash sudo /usr/bin/nvidia-uninstall","title":"Install Drivers Manually"},{"location":"gpu/platform/nvidia/#Install_NVIDIA-Docker","text":"\u7528nvidia-docker\u8dd1\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b","title":"Install NVIDIA-Docker"}]}